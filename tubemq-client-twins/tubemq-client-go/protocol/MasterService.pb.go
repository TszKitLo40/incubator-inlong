//*
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
// <p>
// http://www.apache.org/licenses/LICENSE-2.0
// <p>
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: MasterService.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RebalanceId *int64 `protobuf:"varint,1,opt,name=rebalanceId" json:"rebalanceId,omitempty"`
	OpType      *int32 `protobuf:"varint,2,opt,name=opType" json:"opType,omitempty"`
	Status      *int32 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	// consumerId@group-brokerId:host:port-topic:partitionId
	SubscribeInfo []string `protobuf:"bytes,4,rep,name=subscribeInfo" json:"subscribeInfo,omitempty"`
}

func (x *EventProto) Reset() {
	*x = EventProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProto) ProtoMessage() {}

func (x *EventProto) ProtoReflect() protoreflect.Message {
	mi := &file_MasterService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventProto.ProtoReflect.Descriptor instead.
func (*EventProto) Descriptor() ([]byte, []int) {
	return file_MasterService_proto_rawDescGZIP(), []int{0}
}

func (x *EventProto) GetRebalanceId() int64 {
	if x != nil && x.RebalanceId != nil {
		return *x.RebalanceId
	}
	return 0
}

func (x *EventProto) GetOpType() int32 {
	if x != nil && x.OpType != nil {
		return *x.OpType
	}
	return 0
}

func (x *EventProto) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *EventProto) GetSubscribeInfo() []string {
	if x != nil {
		return x.SubscribeInfo
	}
	return nil
}

type EnableBrokerFunInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableConsumeAuthenticate *bool `protobuf:"varint,1,req,name=enableConsumeAuthenticate" json:"enableConsumeAuthenticate,omitempty"`
	EnableConsumeAuthorize    *bool `protobuf:"varint,2,req,name=enableConsumeAuthorize" json:"enableConsumeAuthorize,omitempty"`
	EnableProduceAuthenticate *bool `protobuf:"varint,3,req,name=enableProduceAuthenticate" json:"enableProduceAuthenticate,omitempty"`
	EnableProduceAuthorize    *bool `protobuf:"varint,4,req,name=enableProduceAuthorize" json:"enableProduceAuthorize,omitempty"`
	EnableVisitTokenCheck     *bool `protobuf:"varint,5,opt,name=enableVisitTokenCheck" json:"enableVisitTokenCheck,omitempty"`
}

func (x *EnableBrokerFunInfo) Reset() {
	*x = EnableBrokerFunInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableBrokerFunInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableBrokerFunInfo) ProtoMessage() {}

func (x *EnableBrokerFunInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MasterService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableBrokerFunInfo.ProtoReflect.Descriptor instead.
func (*EnableBrokerFunInfo) Descriptor() ([]byte, []int) {
	return file_MasterService_proto_rawDescGZIP(), []int{1}
}

func (x *EnableBrokerFunInfo) GetEnableConsumeAuthenticate() bool {
	if x != nil && x.EnableConsumeAuthenticate != nil {
		return *x.EnableConsumeAuthenticate
	}
	return false
}

func (x *EnableBrokerFunInfo) GetEnableConsumeAuthorize() bool {
	if x != nil && x.EnableConsumeAuthorize != nil {
		return *x.EnableConsumeAuthorize
	}
	return false
}

func (x *EnableBrokerFunInfo) GetEnableProduceAuthenticate() bool {
	if x != nil && x.EnableProduceAuthenticate != nil {
		return *x.EnableProduceAuthenticate
	}
	return false
}

func (x *EnableBrokerFunInfo) GetEnableProduceAuthorize() bool {
	if x != nil && x.EnableProduceAuthorize != nil {
		return *x.EnableProduceAuthorize
	}
	return false
}

func (x *EnableBrokerFunInfo) GetEnableVisitTokenCheck() bool {
	if x != nil && x.EnableVisitTokenCheck != nil {
		return *x.EnableVisitTokenCheck
	}
	return false
}

type AuthenticateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName  *string `protobuf:"bytes,1,req,name=userName" json:"userName,omitempty"`
	Timestamp *int64  `protobuf:"varint,2,req,name=timestamp" json:"timestamp,omitempty"`
	Nonce     *int32  `protobuf:"varint,3,req,name=nonce" json:"nonce,omitempty"`
	OthParams *string `protobuf:"bytes,4,req,name=othParams" json:"othParams,omitempty"`
	Signature *string `protobuf:"bytes,5,req,name=signature" json:"signature,omitempty"`
}

func (x *AuthenticateInfo) Reset() {
	*x = AuthenticateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateInfo) ProtoMessage() {}

func (x *AuthenticateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MasterService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateInfo.ProtoReflect.Descriptor instead.
func (*AuthenticateInfo) Descriptor() ([]byte, []int) {
	return file_MasterService_proto_rawDescGZIP(), []int{2}
}

func (x *AuthenticateInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *AuthenticateInfo) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *AuthenticateInfo) GetNonce() int32 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return 0
}

func (x *AuthenticateInfo) GetOthParams() string {
	if x != nil && x.OthParams != nil {
		return *x.OthParams
	}
	return ""
}

func (x *AuthenticateInfo) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

type MasterCertificateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthInfo        *AuthenticateInfo `protobuf:"bytes,1,opt,name=authInfo" json:"authInfo,omitempty"`
	AuthorizedToken *string           `protobuf:"bytes,2,opt,name=authorizedToken" json:"authorizedToken,omitempty"`
}

func (x *MasterCertificateInfo) Reset() {
	*x = MasterCertificateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterCertificateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterCertificateInfo) ProtoMessage() {}

func (x *MasterCertificateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MasterService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterCertificateInfo.ProtoReflect.Descriptor instead.
func (*MasterCertificateInfo) Descriptor() ([]byte, []int) {
	return file_MasterService_proto_rawDescGZIP(), []int{3}
}

func (x *MasterCertificateInfo) GetAuthInfo() *AuthenticateInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *MasterCertificateInfo) GetAuthorizedToken() string {
	if x != nil && x.AuthorizedToken != nil {
		return *x.AuthorizedToken
	}
	return ""
}

type MasterAuthorizedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VisitAuthorizedToken *int64  `protobuf:"varint,1,req,name=visitAuthorizedToken" json:"visitAuthorizedToken,omitempty"`
	AuthAuthorizedToken  *string `protobuf:"bytes,2,opt,name=authAuthorizedToken" json:"authAuthorizedToken,omitempty"`
}

func (x *MasterAuthorizedInfo) Reset() {
	*x = MasterAuthorizedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterAuthorizedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterAuthorizedInfo) ProtoMessage() {}

func (x *MasterAuthorizedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MasterService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterAuthorizedInfo.ProtoReflect.Descriptor instead.
func (*MasterAuthorizedInfo) Descriptor() ([]byte, []int) {
	return file_MasterService_proto_rawDescGZIP(), []int{4}
}

func (x *MasterAuthorizedInfo) GetVisitAuthorizedToken() int64 {
	if x != nil && x.VisitAuthorizedToken != nil {
		return *x.VisitAuthorizedToken
	}
	return 0
}

func (x *MasterAuthorizedInfo) GetAuthAuthorizedToken() string {
	if x != nil && x.AuthAuthorizedToken != nil {
		return *x.AuthAuthorizedToken
	}
	return ""
}

type MasterBrokerAuthorizedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VisitAuthorizedToken *string `protobuf:"bytes,1,req,name=visitAuthorizedToken" json:"visitAuthorizedToken,omitempty"`
	AuthAuthorizedToken  *string `protobuf:"bytes,2,opt,name=authAuthorizedToken" json:"authAuthorizedToken,omitempty"`
}

func (x *MasterBrokerAuthorizedInfo) Reset() {
	*x = MasterBrokerAuthorizedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterBrokerAuthorizedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterBrokerAuthorizedInfo) ProtoMessage() {}

func (x *MasterBrokerAuthorizedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MasterService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterBrokerAuthorizedInfo.ProtoReflect.Descriptor instead.
func (*MasterBrokerAuthorizedInfo) Descriptor() ([]byte, []int) {
	return file_MasterService_proto_rawDescGZIP(), []int{5}
}

func (x *MasterBrokerAuthorizedInfo) GetVisitAuthorizedToken() string {
	if x != nil && x.VisitAuthorizedToken != nil {
		return *x.VisitAuthorizedToken
	}
	return ""
}

func (x *MasterBrokerAuthorizedInfo) GetAuthAuthorizedToken() string {
	if x != nil && x.AuthAuthorizedToken != nil {
		return *x.AuthAuthorizedToken
	}
	return ""
}

type RegisterRequestP2M struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId       *string                `protobuf:"bytes,1,req,name=clientId" json:"clientId,omitempty"`
	TopicList      []string               `protobuf:"bytes,2,rep,name=topicList" json:"topicList,omitempty"`
	BrokerCheckSum *int64                 `protobuf:"varint,3,req,name=brokerCheckSum" json:"brokerCheckSum,omitempty"`
	HostName       *string                `protobuf:"bytes,4,req,name=hostName" json:"hostName,omitempty"`
	AuthInfo       *MasterCertificateInfo `protobuf:"bytes,5,opt,name=authInfo" json:"authInfo,omitempty"`
	JdkVersion     *string                `protobuf:"bytes,6,opt,name=jdkVersion" json:"jdkVersion,omitempty"`
}

func (x *RegisterRequestP2M) Reset() {
	*x = RegisterRequestP2M{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequestP2M) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequestP2M) ProtoMessage() {}

func (x *RegisterRequestP2M) ProtoReflect() protoreflect.Message {
	mi := &file_MasterService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequestP2M.ProtoReflect.Descriptor instead.
func (*RegisterRequestP2M) Descriptor() ([]byte, []int) {
	return file_MasterService_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterRequestP2M) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *RegisterRequestP2M) GetTopicList() []string {
	if x != nil {
		return x.TopicList
	}
	return nil
}

func (x *RegisterRequestP2M) GetBrokerCheckSum() int64 {
	if x != nil && x.BrokerCheckSum != nil {
		return *x.BrokerCheckSum
	}
	return 0
}

func (x *RegisterRequestP2M) GetHostName() string {
	if x != nil && x.HostName != nil {
		return *x.HostName
	}
	return ""
}

func (x *RegisterRequestP2M) GetAuthInfo() *MasterCertificateInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *RegisterRequestP2M) GetJdkVersion() string {
	if x != nil && x.JdkVersion != nil {
		return *x.JdkVersion
	}
	return ""
}

type RegisterResponseM2P struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        *bool                 `protobuf:"varint,1,req,name=success" json:"success,omitempty"`
	ErrCode        *int32                `protobuf:"varint,2,req,name=errCode" json:"errCode,omitempty"`
	ErrMsg         *string               `protobuf:"bytes,3,req,name=errMsg" json:"errMsg,omitempty"`
	BrokerCheckSum *int64                `protobuf:"varint,4,req,name=brokerCheckSum" json:"brokerCheckSum,omitempty"`
	BrokerInfos    []string              `protobuf:"bytes,5,rep,name=brokerInfos" json:"brokerInfos,omitempty"`
	AuthorizedInfo *MasterAuthorizedInfo `protobuf:"bytes,6,opt,name=authorizedInfo" json:"authorizedInfo,omitempty"`
}

func (x *RegisterResponseM2P) Reset() {
	*x = RegisterResponseM2P{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponseM2P) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponseM2P) ProtoMessage() {}

func (x *RegisterResponseM2P) ProtoReflect() protoreflect.Message {
	mi := &file_MasterService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponseM2P.ProtoReflect.Descriptor instead.
func (*RegisterResponseM2P) Descriptor() ([]byte, []int) {
	return file_MasterService_proto_rawDescGZIP(), []int{7}
}

func (x *RegisterResponseM2P) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *RegisterResponseM2P) GetErrCode() int32 {
	if x != nil && x.ErrCode != nil {
		return *x.ErrCode
	}
	return 0
}

func (x *RegisterResponseM2P) GetErrMsg() string {
	if x != nil && x.ErrMsg != nil {
		return *x.ErrMsg
	}
	return ""
}

func (x *RegisterResponseM2P) GetBrokerCheckSum() int64 {
	if x != nil && x.BrokerCheckSum != nil {
		return *x.BrokerCheckSum
	}
	return 0
}

func (x *RegisterResponseM2P) GetBrokerInfos() []string {
	if x != nil {
		return x.BrokerInfos
	}
	return nil
}

func (x *RegisterResponseM2P) GetAuthorizedInfo() *MasterAuthorizedInfo {
	if x != nil {
		return x.AuthorizedInfo
	}
	return nil
}

type HeartRequestP2M struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId       *string                `protobuf:"bytes,1,req,name=clientId" json:"clientId,omitempty"`
	BrokerCheckSum *int64                 `protobuf:"varint,2,req,name=brokerCheckSum" json:"brokerCheckSum,omitempty"`
	HostName       *string                `protobuf:"bytes,3,req,name=hostName" json:"hostName,omitempty"`
	TopicList      []string               `protobuf:"bytes,4,rep,name=topicList" json:"topicList,omitempty"`
	AuthInfo       *MasterCertificateInfo `protobuf:"bytes,5,opt,name=authInfo" json:"authInfo,omitempty"`
}

func (x *HeartRequestP2M) Reset() {
	*x = HeartRequestP2M{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartRequestP2M) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartRequestP2M) ProtoMessage() {}

func (x *HeartRequestP2M) ProtoReflect() protoreflect.Message {
	mi := &file_MasterService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartRequestP2M.ProtoReflect.Descriptor instead.
func (*HeartRequestP2M) Descriptor() ([]byte, []int) {
	return file_MasterService_proto_rawDescGZIP(), []int{8}
}

func (x *HeartRequestP2M) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *HeartRequestP2M) GetBrokerCheckSum() int64 {
	if x != nil && x.BrokerCheckSum != nil {
		return *x.BrokerCheckSum
	}
	return 0
}

func (x *HeartRequestP2M) GetHostName() string {
	if x != nil && x.HostName != nil {
		return *x.HostName
	}
	return ""
}

func (x *HeartRequestP2M) GetTopicList() []string {
	if x != nil {
		return x.TopicList
	}
	return nil
}

func (x *HeartRequestP2M) GetAuthInfo() *MasterCertificateInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

type HeartResponseM2P struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        *bool   `protobuf:"varint,1,req,name=success" json:"success,omitempty"`
	ErrCode        *int32  `protobuf:"varint,2,req,name=errCode" json:"errCode,omitempty"`
	ErrMsg         *string `protobuf:"bytes,3,req,name=errMsg" json:"errMsg,omitempty"`
	BrokerCheckSum *int64  `protobuf:"varint,4,req,name=brokerCheckSum" json:"brokerCheckSum,omitempty"`
	// brokerId:host:port-topic:partitionNum
	TopicInfos     []string              `protobuf:"bytes,5,rep,name=topicInfos" json:"topicInfos,omitempty"`
	BrokerInfos    []string              `protobuf:"bytes,6,rep,name=brokerInfos" json:"brokerInfos,omitempty"`
	RequireAuth    *bool                 `protobuf:"varint,7,opt,name=requireAuth" json:"requireAuth,omitempty"`
	AuthorizedInfo *MasterAuthorizedInfo `protobuf:"bytes,8,opt,name=authorizedInfo" json:"authorizedInfo,omitempty"`
}

func (x *HeartResponseM2P) Reset() {
	*x = HeartResponseM2P{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartResponseM2P) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartResponseM2P) ProtoMessage() {}

func (x *HeartResponseM2P) ProtoReflect() protoreflect.Message {
	mi := &file_MasterService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartResponseM2P.ProtoReflect.Descriptor instead.
func (*HeartResponseM2P) Descriptor() ([]byte, []int) {
	return file_MasterService_proto_rawDescGZIP(), []int{9}
}

func (x *HeartResponseM2P) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *HeartResponseM2P) GetErrCode() int32 {
	if x != nil && x.ErrCode != nil {
		return *x.ErrCode
	}
	return 0
}

func (x *HeartResponseM2P) GetErrMsg() string {
	if x != nil && x.ErrMsg != nil {
		return *x.ErrMsg
	}
	return ""
}

func (x *HeartResponseM2P) GetBrokerCheckSum() int64 {
	if x != nil && x.BrokerCheckSum != nil {
		return *x.BrokerCheckSum
	}
	return 0
}

func (x *HeartResponseM2P) GetTopicInfos() []string {
	if x != nil {
		return x.TopicInfos
	}
	return nil
}

func (x *HeartResponseM2P) GetBrokerInfos() []string {
	if x != nil {
		return x.BrokerInfos
	}
	return nil
}

func (x *HeartResponseM2P) GetRequireAuth() bool {
	if x != nil && x.RequireAuth != nil {
		return *x.RequireAuth
	}
	return false
}

func (x *HeartResponseM2P) GetAuthorizedInfo() *MasterAuthorizedInfo {
	if x != nil {
		return x.AuthorizedInfo
	}
	return nil
}

type CloseRequestP2M struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId *string                `protobuf:"bytes,1,req,name=clientId" json:"clientId,omitempty"`
	AuthInfo *MasterCertificateInfo `protobuf:"bytes,2,opt,name=authInfo" json:"authInfo,omitempty"`
}

func (x *CloseRequestP2M) Reset() {
	*x = CloseRequestP2M{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseRequestP2M) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseRequestP2M) ProtoMessage() {}

func (x *CloseRequestP2M) ProtoReflect() protoreflect.Message {
	mi := &file_MasterService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseRequestP2M.ProtoReflect.Descriptor instead.
func (*CloseRequestP2M) Descriptor() ([]byte, []int) {
	return file_MasterService_proto_rawDescGZIP(), []int{10}
}

func (x *CloseRequestP2M) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *CloseRequestP2M) GetAuthInfo() *MasterCertificateInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

type CloseResponseM2P struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool   `protobuf:"varint,1,req,name=success" json:"success,omitempty"`
	ErrCode *int32  `protobuf:"varint,2,req,name=errCode" json:"errCode,omitempty"`
	ErrMsg  *string `protobuf:"bytes,3,req,name=errMsg" json:"errMsg,omitempty"`
}

func (x *CloseResponseM2P) Reset() {
	*x = CloseResponseM2P{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseResponseM2P) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseResponseM2P) ProtoMessage() {}

func (x *CloseResponseM2P) ProtoReflect() protoreflect.Message {
	mi := &file_MasterService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseResponseM2P.ProtoReflect.Descriptor instead.
func (*CloseResponseM2P) Descriptor() ([]byte, []int) {
	return file_MasterService_proto_rawDescGZIP(), []int{11}
}

func (x *CloseResponseM2P) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CloseResponseM2P) GetErrCode() int32 {
	if x != nil && x.ErrCode != nil {
		return *x.ErrCode
	}
	return 0
}

func (x *CloseResponseM2P) GetErrMsg() string {
	if x != nil && x.ErrMsg != nil {
		return *x.ErrMsg
	}
	return ""
}

type RegisterRequestC2M struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId  *string  `protobuf:"bytes,1,req,name=clientId" json:"clientId,omitempty"`
	GroupName *string  `protobuf:"bytes,2,req,name=groupName" json:"groupName,omitempty"`
	HostName  *string  `protobuf:"bytes,3,req,name=hostName" json:"hostName,omitempty"`
	TopicList []string `protobuf:"bytes,4,rep,name=topicList" json:"topicList,omitempty"`
	// consumerId@group-brokerId:host:port-topic:partitionId
	SubscribeInfo     []string               `protobuf:"bytes,5,rep,name=subscribeInfo" json:"subscribeInfo,omitempty"`
	TopicCondition    []string               `protobuf:"bytes,6,rep,name=topicCondition" json:"topicCondition,omitempty"`
	RequireBound      *bool                  `protobuf:"varint,7,opt,name=requireBound" json:"requireBound,omitempty"`
	SessionTime       *int64                 `protobuf:"varint,8,opt,name=sessionTime" json:"sessionTime,omitempty"`
	SessionKey        *string                `protobuf:"bytes,9,opt,name=sessionKey" json:"sessionKey,omitempty"`
	TotalCount        *int32                 `protobuf:"varint,10,opt,name=totalCount" json:"totalCount,omitempty"`
	RequiredPartition *string                `protobuf:"bytes,11,opt,name=requiredPartition" json:"requiredPartition,omitempty"`
	NotAllocated      *bool                  `protobuf:"varint,12,opt,name=notAllocated" json:"notAllocated,omitempty"`
	SelectBig         *bool                  `protobuf:"varint,13,opt,name=selectBig" json:"selectBig,omitempty"`
	GroupFlowCheckId  *int64                 `protobuf:"varint,14,opt,name=groupFlowCheckId" json:"groupFlowCheckId,omitempty"`
	DefFlowCheckId    *int64                 `protobuf:"varint,15,opt,name=defFlowCheckId" json:"defFlowCheckId,omitempty"`
	SsdStoreId        *int64                 `protobuf:"varint,16,opt,name=ssdStoreId" json:"ssdStoreId,omitempty"` // Deprecated
	QryPriorityId     *int32                 `protobuf:"varint,17,opt,name=qryPriorityId" json:"qryPriorityId,omitempty"`
	AuthInfo          *MasterCertificateInfo `protobuf:"bytes,18,opt,name=authInfo" json:"authInfo,omitempty"`
	JdkVersion        *string                `protobuf:"bytes,19,opt,name=jdkVersion" json:"jdkVersion,omitempty"`
}

func (x *RegisterRequestC2M) Reset() {
	*x = RegisterRequestC2M{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequestC2M) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequestC2M) ProtoMessage() {}

func (x *RegisterRequestC2M) ProtoReflect() protoreflect.Message {
	mi := &file_MasterService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequestC2M.ProtoReflect.Descriptor instead.
func (*RegisterRequestC2M) Descriptor() ([]byte, []int) {
	return file_MasterService_proto_rawDescGZIP(), []int{12}
}

func (x *RegisterRequestC2M) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *RegisterRequestC2M) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

func (x *RegisterRequestC2M) GetHostName() string {
	if x != nil && x.HostName != nil {
		return *x.HostName
	}
	return ""
}

func (x *RegisterRequestC2M) GetTopicList() []string {
	if x != nil {
		return x.TopicList
	}
	return nil
}

func (x *RegisterRequestC2M) GetSubscribeInfo() []string {
	if x != nil {
		return x.SubscribeInfo
	}
	return nil
}

func (x *RegisterRequestC2M) GetTopicCondition() []string {
	if x != nil {
		return x.TopicCondition
	}
	return nil
}

func (x *RegisterRequestC2M) GetRequireBound() bool {
	if x != nil && x.RequireBound != nil {
		return *x.RequireBound
	}
	return false
}

func (x *RegisterRequestC2M) GetSessionTime() int64 {
	if x != nil && x.SessionTime != nil {
		return *x.SessionTime
	}
	return 0
}

func (x *RegisterRequestC2M) GetSessionKey() string {
	if x != nil && x.SessionKey != nil {
		return *x.SessionKey
	}
	return ""
}

func (x *RegisterRequestC2M) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *RegisterRequestC2M) GetRequiredPartition() string {
	if x != nil && x.RequiredPartition != nil {
		return *x.RequiredPartition
	}
	return ""
}

func (x *RegisterRequestC2M) GetNotAllocated() bool {
	if x != nil && x.NotAllocated != nil {
		return *x.NotAllocated
	}
	return false
}

func (x *RegisterRequestC2M) GetSelectBig() bool {
	if x != nil && x.SelectBig != nil {
		return *x.SelectBig
	}
	return false
}

func (x *RegisterRequestC2M) GetGroupFlowCheckId() int64 {
	if x != nil && x.GroupFlowCheckId != nil {
		return *x.GroupFlowCheckId
	}
	return 0
}

func (x *RegisterRequestC2M) GetDefFlowCheckId() int64 {
	if x != nil && x.DefFlowCheckId != nil {
		return *x.DefFlowCheckId
	}
	return 0
}

func (x *RegisterRequestC2M) GetSsdStoreId() int64 {
	if x != nil && x.SsdStoreId != nil {
		return *x.SsdStoreId
	}
	return 0
}

func (x *RegisterRequestC2M) GetQryPriorityId() int32 {
	if x != nil && x.QryPriorityId != nil {
		return *x.QryPriorityId
	}
	return 0
}

func (x *RegisterRequestC2M) GetAuthInfo() *MasterCertificateInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *RegisterRequestC2M) GetJdkVersion() string {
	if x != nil && x.JdkVersion != nil {
		return *x.JdkVersion
	}
	return ""
}

type RegisterResponseM2C struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool   `protobuf:"varint,1,req,name=success" json:"success,omitempty"`
	ErrCode *int32  `protobuf:"varint,2,req,name=errCode" json:"errCode,omitempty"`
	ErrMsg  *string `protobuf:"bytes,3,req,name=errMsg" json:"errMsg,omitempty"`
	// brokerId:host:port-topic:partitionNum
	TopicInfo            []string              `protobuf:"bytes,4,rep,name=topicInfo" json:"topicInfo,omitempty"`
	NotAllocated         *bool                 `protobuf:"varint,5,opt,name=notAllocated" json:"notAllocated,omitempty"`
	DefFlowCheckId       *int64                `protobuf:"varint,6,opt,name=defFlowCheckId" json:"defFlowCheckId,omitempty"`
	DefFlowControlInfo   *string               `protobuf:"bytes,7,opt,name=defFlowControlInfo" json:"defFlowControlInfo,omitempty"`
	GroupFlowCheckId     *int64                `protobuf:"varint,8,opt,name=groupFlowCheckId" json:"groupFlowCheckId,omitempty"`
	GroupFlowControlInfo *string               `protobuf:"bytes,9,opt,name=groupFlowControlInfo" json:"groupFlowControlInfo,omitempty"`
	SsdStoreId           *int64                `protobuf:"varint,10,opt,name=ssdStoreId" json:"ssdStoreId,omitempty"` // Deprecated
	QryPriorityId        *int32                `protobuf:"varint,11,opt,name=qryPriorityId" json:"qryPriorityId,omitempty"`
	AuthorizedInfo       *MasterAuthorizedInfo `protobuf:"bytes,12,opt,name=authorizedInfo" json:"authorizedInfo,omitempty"`
}

func (x *RegisterResponseM2C) Reset() {
	*x = RegisterResponseM2C{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponseM2C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponseM2C) ProtoMessage() {}

func (x *RegisterResponseM2C) ProtoReflect() protoreflect.Message {
	mi := &file_MasterService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponseM2C.ProtoReflect.Descriptor instead.
func (*RegisterResponseM2C) Descriptor() ([]byte, []int) {
	return file_MasterService_proto_rawDescGZIP(), []int{13}
}

func (x *RegisterResponseM2C) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *RegisterResponseM2C) GetErrCode() int32 {
	if x != nil && x.ErrCode != nil {
		return *x.ErrCode
	}
	return 0
}

func (x *RegisterResponseM2C) GetErrMsg() string {
	if x != nil && x.ErrMsg != nil {
		return *x.ErrMsg
	}
	return ""
}

func (x *RegisterResponseM2C) GetTopicInfo() []string {
	if x != nil {
		return x.TopicInfo
	}
	return nil
}

func (x *RegisterResponseM2C) GetNotAllocated() bool {
	if x != nil && x.NotAllocated != nil {
		return *x.NotAllocated
	}
	return false
}

func (x *RegisterResponseM2C) GetDefFlowCheckId() int64 {
	if x != nil && x.DefFlowCheckId != nil {
		return *x.DefFlowCheckId
	}
	return 0
}

func (x *RegisterResponseM2C) GetDefFlowControlInfo() string {
	if x != nil && x.DefFlowControlInfo != nil {
		return *x.DefFlowControlInfo
	}
	return ""
}

func (x *RegisterResponseM2C) GetGroupFlowCheckId() int64 {
	if x != nil && x.GroupFlowCheckId != nil {
		return *x.GroupFlowCheckId
	}
	return 0
}

func (x *RegisterResponseM2C) GetGroupFlowControlInfo() string {
	if x != nil && x.GroupFlowControlInfo != nil {
		return *x.GroupFlowControlInfo
	}
	return ""
}

func (x *RegisterResponseM2C) GetSsdStoreId() int64 {
	if x != nil && x.SsdStoreId != nil {
		return *x.SsdStoreId
	}
	return 0
}

func (x *RegisterResponseM2C) GetQryPriorityId() int32 {
	if x != nil && x.QryPriorityId != nil {
		return *x.QryPriorityId
	}
	return 0
}

func (x *RegisterResponseM2C) GetAuthorizedInfo() *MasterAuthorizedInfo {
	if x != nil {
		return x.AuthorizedInfo
	}
	return nil
}

type HeartRequestC2M struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId            *string                `protobuf:"bytes,1,req,name=clientId" json:"clientId,omitempty"`
	GroupName           *string                `protobuf:"bytes,2,req,name=groupName" json:"groupName,omitempty"`
	SubscribeInfo       []string               `protobuf:"bytes,3,rep,name=subscribeInfo" json:"subscribeInfo,omitempty"`
	ReportSubscribeInfo *bool                  `protobuf:"varint,4,req,name=reportSubscribeInfo" json:"reportSubscribeInfo,omitempty"`
	Event               *EventProto            `protobuf:"bytes,5,opt,name=event" json:"event,omitempty"`
	DefFlowCheckId      *int64                 `protobuf:"varint,6,opt,name=defFlowCheckId" json:"defFlowCheckId,omitempty"`
	GroupFlowCheckId    *int64                 `protobuf:"varint,7,opt,name=groupFlowCheckId" json:"groupFlowCheckId,omitempty"`
	SsdStoreId          *int64                 `protobuf:"varint,8,opt,name=ssdStoreId" json:"ssdStoreId,omitempty"` // Deprecated
	QryPriorityId       *int32                 `protobuf:"varint,9,opt,name=qryPriorityId" json:"qryPriorityId,omitempty"`
	AuthInfo            *MasterCertificateInfo `protobuf:"bytes,10,opt,name=authInfo" json:"authInfo,omitempty"`
}

func (x *HeartRequestC2M) Reset() {
	*x = HeartRequestC2M{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartRequestC2M) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartRequestC2M) ProtoMessage() {}

func (x *HeartRequestC2M) ProtoReflect() protoreflect.Message {
	mi := &file_MasterService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartRequestC2M.ProtoReflect.Descriptor instead.
func (*HeartRequestC2M) Descriptor() ([]byte, []int) {
	return file_MasterService_proto_rawDescGZIP(), []int{14}
}

func (x *HeartRequestC2M) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *HeartRequestC2M) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

func (x *HeartRequestC2M) GetSubscribeInfo() []string {
	if x != nil {
		return x.SubscribeInfo
	}
	return nil
}

func (x *HeartRequestC2M) GetReportSubscribeInfo() bool {
	if x != nil && x.ReportSubscribeInfo != nil {
		return *x.ReportSubscribeInfo
	}
	return false
}

func (x *HeartRequestC2M) GetEvent() *EventProto {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *HeartRequestC2M) GetDefFlowCheckId() int64 {
	if x != nil && x.DefFlowCheckId != nil {
		return *x.DefFlowCheckId
	}
	return 0
}

func (x *HeartRequestC2M) GetGroupFlowCheckId() int64 {
	if x != nil && x.GroupFlowCheckId != nil {
		return *x.GroupFlowCheckId
	}
	return 0
}

func (x *HeartRequestC2M) GetSsdStoreId() int64 {
	if x != nil && x.SsdStoreId != nil {
		return *x.SsdStoreId
	}
	return 0
}

func (x *HeartRequestC2M) GetQryPriorityId() int32 {
	if x != nil && x.QryPriorityId != nil {
		return *x.QryPriorityId
	}
	return 0
}

func (x *HeartRequestC2M) GetAuthInfo() *MasterCertificateInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

type HeartResponseM2C struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success              *bool                 `protobuf:"varint,1,req,name=success" json:"success,omitempty"`
	ErrCode              *int32                `protobuf:"varint,2,req,name=errCode" json:"errCode,omitempty"`
	ErrMsg               *string               `protobuf:"bytes,3,req,name=errMsg" json:"errMsg,omitempty"`
	Event                *EventProto           `protobuf:"bytes,4,opt,name=event" json:"event,omitempty"`
	NotAllocated         *bool                 `protobuf:"varint,5,opt,name=notAllocated" json:"notAllocated,omitempty"`
	DefFlowCheckId       *int64                `protobuf:"varint,6,opt,name=defFlowCheckId" json:"defFlowCheckId,omitempty"`
	DefFlowControlInfo   *string               `protobuf:"bytes,7,opt,name=defFlowControlInfo" json:"defFlowControlInfo,omitempty"`
	GroupFlowCheckId     *int64                `protobuf:"varint,8,opt,name=groupFlowCheckId" json:"groupFlowCheckId,omitempty"`
	GroupFlowControlInfo *string               `protobuf:"bytes,9,opt,name=groupFlowControlInfo" json:"groupFlowControlInfo,omitempty"`
	SsdStoreId           *int64                `protobuf:"varint,10,opt,name=ssdStoreId" json:"ssdStoreId,omitempty"` // Deprecated
	QryPriorityId        *int32                `protobuf:"varint,11,opt,name=qryPriorityId" json:"qryPriorityId,omitempty"`
	RequireAuth          *bool                 `protobuf:"varint,12,opt,name=requireAuth" json:"requireAuth,omitempty"`
	AuthorizedInfo       *MasterAuthorizedInfo `protobuf:"bytes,13,opt,name=authorizedInfo" json:"authorizedInfo,omitempty"`
}

func (x *HeartResponseM2C) Reset() {
	*x = HeartResponseM2C{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartResponseM2C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartResponseM2C) ProtoMessage() {}

func (x *HeartResponseM2C) ProtoReflect() protoreflect.Message {
	mi := &file_MasterService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartResponseM2C.ProtoReflect.Descriptor instead.
func (*HeartResponseM2C) Descriptor() ([]byte, []int) {
	return file_MasterService_proto_rawDescGZIP(), []int{15}
}

func (x *HeartResponseM2C) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *HeartResponseM2C) GetErrCode() int32 {
	if x != nil && x.ErrCode != nil {
		return *x.ErrCode
	}
	return 0
}

func (x *HeartResponseM2C) GetErrMsg() string {
	if x != nil && x.ErrMsg != nil {
		return *x.ErrMsg
	}
	return ""
}

func (x *HeartResponseM2C) GetEvent() *EventProto {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *HeartResponseM2C) GetNotAllocated() bool {
	if x != nil && x.NotAllocated != nil {
		return *x.NotAllocated
	}
	return false
}

func (x *HeartResponseM2C) GetDefFlowCheckId() int64 {
	if x != nil && x.DefFlowCheckId != nil {
		return *x.DefFlowCheckId
	}
	return 0
}

func (x *HeartResponseM2C) GetDefFlowControlInfo() string {
	if x != nil && x.DefFlowControlInfo != nil {
		return *x.DefFlowControlInfo
	}
	return ""
}

func (x *HeartResponseM2C) GetGroupFlowCheckId() int64 {
	if x != nil && x.GroupFlowCheckId != nil {
		return *x.GroupFlowCheckId
	}
	return 0
}

func (x *HeartResponseM2C) GetGroupFlowControlInfo() string {
	if x != nil && x.GroupFlowControlInfo != nil {
		return *x.GroupFlowControlInfo
	}
	return ""
}

func (x *HeartResponseM2C) GetSsdStoreId() int64 {
	if x != nil && x.SsdStoreId != nil {
		return *x.SsdStoreId
	}
	return 0
}

func (x *HeartResponseM2C) GetQryPriorityId() int32 {
	if x != nil && x.QryPriorityId != nil {
		return *x.QryPriorityId
	}
	return 0
}

func (x *HeartResponseM2C) GetRequireAuth() bool {
	if x != nil && x.RequireAuth != nil {
		return *x.RequireAuth
	}
	return false
}

func (x *HeartResponseM2C) GetAuthorizedInfo() *MasterAuthorizedInfo {
	if x != nil {
		return x.AuthorizedInfo
	}
	return nil
}

type CloseRequestC2M struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId  *string                `protobuf:"bytes,1,req,name=clientId" json:"clientId,omitempty"`
	GroupName *string                `protobuf:"bytes,2,req,name=groupName" json:"groupName,omitempty"`
	AuthInfo  *MasterCertificateInfo `protobuf:"bytes,3,opt,name=authInfo" json:"authInfo,omitempty"`
}

func (x *CloseRequestC2M) Reset() {
	*x = CloseRequestC2M{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseRequestC2M) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseRequestC2M) ProtoMessage() {}

func (x *CloseRequestC2M) ProtoReflect() protoreflect.Message {
	mi := &file_MasterService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseRequestC2M.ProtoReflect.Descriptor instead.
func (*CloseRequestC2M) Descriptor() ([]byte, []int) {
	return file_MasterService_proto_rawDescGZIP(), []int{16}
}

func (x *CloseRequestC2M) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *CloseRequestC2M) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

func (x *CloseRequestC2M) GetAuthInfo() *MasterCertificateInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

type CloseResponseM2C struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool   `protobuf:"varint,1,req,name=success" json:"success,omitempty"`
	ErrCode *int32  `protobuf:"varint,2,req,name=errCode" json:"errCode,omitempty"`
	ErrMsg  *string `protobuf:"bytes,3,req,name=errMsg" json:"errMsg,omitempty"`
}

func (x *CloseResponseM2C) Reset() {
	*x = CloseResponseM2C{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MasterService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseResponseM2C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseResponseM2C) ProtoMessage() {}

func (x *CloseResponseM2C) ProtoReflect() protoreflect.Message {
	mi := &file_MasterService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseResponseM2C.ProtoReflect.Descriptor instead.
func (*CloseResponseM2C) Descriptor() ([]byte, []int) {
	return file_MasterService_proto_rawDescGZIP(), []int{17}
}

func (x *CloseResponseM2C) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CloseResponseM2C) GetErrCode() int32 {
	if x != nil && x.ErrCode != nil {
		return *x.ErrCode
	}
	return 0
}

func (x *CloseResponseM2C) GetErrMsg() string {
	if x != nil && x.ErrMsg != nil {
		return *x.ErrMsg
	}
	return ""
}

var File_MasterService_proto protoreflect.FileDescriptor

var file_MasterService_proto_rawDesc = []byte{
	0x0a, 0x13, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb7, 0x02, 0x0a,
	0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x75, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x19, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x9e, 0x01, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f,
	0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x70, 0x0a, 0x15, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2d, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x28, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7c, 0x0a, 0x14, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x32, 0x0a, 0x14, 0x76, 0x69, 0x73, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x14, 0x76, 0x69, 0x73, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x1a, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x76, 0x69, 0x73, 0x69, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x14, 0x76, 0x69, 0x73, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x75,
	0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe6, 0x01, 0x0a,
	0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x32, 0x4d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x64, 0x6b, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xea, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x32, 0x50, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x75,
	0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xc3, 0x01, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x32, 0x4d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa9, 0x02, 0x0a, 0x10, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x32, 0x50, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x75,
	0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x32, 0x4d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5e, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x32, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xba, 0x05, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x32, 0x4d, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x42, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x42, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x73,
	0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x73, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x72,
	0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x71, 0x72, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x64, 0x6b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe0, 0x03, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x32, 0x43, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f,
	0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65,
	0x66, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x64, 0x65, 0x66, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x73, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x73, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x72, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x71, 0x72, 0x79, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x94, 0x03, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x32, 0x4d, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x46, 0x6c, 0x6f,
	0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x73, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x73, 0x64, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x72, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x71, 0x72, 0x79,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x84,
	0x04, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x32, 0x43, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07,
	0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x21, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x46, 0x6c, 0x6f,
	0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x64, 0x65, 0x66, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x64, 0x65, 0x66, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x66, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a,
	0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x73, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x73, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x71, 0x72, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x71, 0x72, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7f, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x32, 0x4d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5e, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x32, 0x43, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x50, 0x0a, 0x2d, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x74, 0x75, 0x62, 0x65, 0x6d, 0x71, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x48, 0x01, 0x5a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2f, 0x88, 0x01, 0x01, 0xa0, 0x01, 0x01,
}

var (
	file_MasterService_proto_rawDescOnce sync.Once
	file_MasterService_proto_rawDescData = file_MasterService_proto_rawDesc
)

func file_MasterService_proto_rawDescGZIP() []byte {
	file_MasterService_proto_rawDescOnce.Do(func() {
		file_MasterService_proto_rawDescData = protoimpl.X.CompressGZIP(file_MasterService_proto_rawDescData)
	})
	return file_MasterService_proto_rawDescData
}

var file_MasterService_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_MasterService_proto_goTypes = []interface{}{
	(*EventProto)(nil),                 // 0: EventProto
	(*EnableBrokerFunInfo)(nil),        // 1: EnableBrokerFunInfo
	(*AuthenticateInfo)(nil),           // 2: AuthenticateInfo
	(*MasterCertificateInfo)(nil),      // 3: MasterCertificateInfo
	(*MasterAuthorizedInfo)(nil),       // 4: MasterAuthorizedInfo
	(*MasterBrokerAuthorizedInfo)(nil), // 5: MasterBrokerAuthorizedInfo
	(*RegisterRequestP2M)(nil),         // 6: RegisterRequestP2M
	(*RegisterResponseM2P)(nil),        // 7: RegisterResponseM2P
	(*HeartRequestP2M)(nil),            // 8: HeartRequestP2M
	(*HeartResponseM2P)(nil),           // 9: HeartResponseM2P
	(*CloseRequestP2M)(nil),            // 10: CloseRequestP2M
	(*CloseResponseM2P)(nil),           // 11: CloseResponseM2P
	(*RegisterRequestC2M)(nil),         // 12: RegisterRequestC2M
	(*RegisterResponseM2C)(nil),        // 13: RegisterResponseM2C
	(*HeartRequestC2M)(nil),            // 14: HeartRequestC2M
	(*HeartResponseM2C)(nil),           // 15: HeartResponseM2C
	(*CloseRequestC2M)(nil),            // 16: CloseRequestC2M
	(*CloseResponseM2C)(nil),           // 17: CloseResponseM2C
}
var file_MasterService_proto_depIdxs = []int32{
	2,  // 0: MasterCertificateInfo.authInfo:type_name -> AuthenticateInfo
	3,  // 1: RegisterRequestP2M.authInfo:type_name -> MasterCertificateInfo
	4,  // 2: RegisterResponseM2P.authorizedInfo:type_name -> MasterAuthorizedInfo
	3,  // 3: HeartRequestP2M.authInfo:type_name -> MasterCertificateInfo
	4,  // 4: HeartResponseM2P.authorizedInfo:type_name -> MasterAuthorizedInfo
	3,  // 5: CloseRequestP2M.authInfo:type_name -> MasterCertificateInfo
	3,  // 6: RegisterRequestC2M.authInfo:type_name -> MasterCertificateInfo
	4,  // 7: RegisterResponseM2C.authorizedInfo:type_name -> MasterAuthorizedInfo
	0,  // 8: HeartRequestC2M.event:type_name -> EventProto
	3,  // 9: HeartRequestC2M.authInfo:type_name -> MasterCertificateInfo
	0,  // 10: HeartResponseM2C.event:type_name -> EventProto
	4,  // 11: HeartResponseM2C.authorizedInfo:type_name -> MasterAuthorizedInfo
	3,  // 12: CloseRequestC2M.authInfo:type_name -> MasterCertificateInfo
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_MasterService_proto_init() }
func file_MasterService_proto_init() {
	if File_MasterService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_MasterService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableBrokerFunInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterCertificateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterAuthorizedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterBrokerAuthorizedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequestP2M); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponseM2P); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartRequestP2M); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartResponseM2P); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseRequestP2M); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseResponseM2P); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequestC2M); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponseM2C); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartRequestC2M); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartResponseM2C); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseRequestC2M); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MasterService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseResponseM2C); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_MasterService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_MasterService_proto_goTypes,
		DependencyIndexes: file_MasterService_proto_depIdxs,
		MessageInfos:      file_MasterService_proto_msgTypes,
	}.Build()
	File_MasterService_proto = out.File
	file_MasterService_proto_rawDesc = nil
	file_MasterService_proto_goTypes = nil
	file_MasterService_proto_depIdxs = nil
}
